{"ast":null,"code":"import { PERCENT, SCIENTIFIC, NUMBER_PLACEHOLDER, CURRENCY_PLACEHOLDER, PERCENT_PLACEHOLDER, EMPTY, POINT } from '../common/constants';\nimport isNegativeZero from '../common/is-negative-zero';\nimport formatCurrencySymbol from './format-currency-symbol';\nimport groupInteger from './group-integer';\nimport isCurrencyStyle from './is-currency-style';\nimport pad from '../common/pad';\nimport round from '../common/round';\nimport { currencyFractionOptions } from '../cldr';\nvar DEFAULT_DECIMAL_ROUNDING = 3;\nvar DEFAULT_PERCENT_ROUNDING = 0;\nvar trailingZeroRegex = /0+$/;\nfunction fractionOptions(options) {\n  var minimumFractionDigits = options.minimumFractionDigits;\n  var maximumFractionDigits = options.maximumFractionDigits;\n  var style = options.style;\n  var isCurrency = isCurrencyStyle(style);\n  var currencyFractions;\n  if (isCurrency) {\n    currencyFractions = currencyFractionOptions(options.currency);\n  }\n  if (minimumFractionDigits === undefined) {\n    minimumFractionDigits = isCurrency ? currencyFractions.minimumFractionDigits : 0;\n  }\n  if (maximumFractionDigits === undefined) {\n    if (style === PERCENT) {\n      maximumFractionDigits = Math.max(minimumFractionDigits, DEFAULT_PERCENT_ROUNDING);\n    } else if (isCurrency) {\n      maximumFractionDigits = Math.max(minimumFractionDigits, currencyFractions.maximumFractionDigits);\n    } else {\n      maximumFractionDigits = Math.max(minimumFractionDigits, DEFAULT_DECIMAL_ROUNDING);\n    }\n  }\n  return {\n    minimumFractionDigits: minimumFractionDigits,\n    maximumFractionDigits: maximumFractionDigits\n  };\n}\nfunction applyPattern(value, pattern, symbol) {\n  var result = EMPTY;\n  for (var idx = 0, length = pattern.length; idx < length; idx++) {\n    var ch = pattern.charAt(idx);\n    if (ch === NUMBER_PLACEHOLDER) {\n      result += value;\n    } else if (ch === CURRENCY_PLACEHOLDER || ch === PERCENT_PLACEHOLDER) {\n      result += symbol;\n    } else {\n      result += ch;\n    }\n  }\n  return result;\n}\nfunction currencyUnitPattern(info, value) {\n  var currencyInfo = info.numbers.currency;\n  var pattern = value !== 1 ? currencyInfo[\"unitPattern-count-other\"] : currencyInfo[\"unitPattern-count-one\"];\n  if (value < 0) {\n    pattern = pattern.replace(NUMBER_PLACEHOLDER, \"-\" + NUMBER_PLACEHOLDER);\n  }\n  return pattern;\n}\nexport default function standardNumberFormat(number, options, info) {\n  var symbols = info.numbers.symbols;\n  var style = options.style;\n  var isCurrency = isCurrencyStyle(style);\n\n  //return number in exponential format\n  if (style === SCIENTIFIC) {\n    var exponential = options.minimumFractionDigits !== undefined ? number.toExponential(options.minimumFractionDigits) : number.toExponential();\n    return exponential.replace(POINT, symbols.decimal);\n  }\n  var value = number;\n  var symbol;\n  if (isCurrency) {\n    options.value = value;\n    symbol = formatCurrencySymbol(info, options);\n  }\n  if (style === PERCENT) {\n    value *= 100;\n    symbol = symbols.percentSign;\n  }\n  var ref = fractionOptions(options);\n  var minimumFractionDigits = ref.minimumFractionDigits;\n  var maximumFractionDigits = ref.maximumFractionDigits;\n  value = round(value, maximumFractionDigits);\n  var negative = value < 0;\n  var negativeZero = isNegativeZero(number);\n  var parts = value.split(POINT);\n  var integer = parts[0];\n  var fraction = pad(parts[1] ? parts[1].replace(trailingZeroRegex, EMPTY) : EMPTY, minimumFractionDigits, true);\n\n  //exclude \"-\" if number is negative.\n  if (negative) {\n    integer = integer.substring(1);\n  }\n  if (options.minimumIntegerDigits) {\n    integer = pad(integer, options.minimumIntegerDigits);\n  }\n  var formattedValue = options.useGrouping !== false ? groupInteger(integer, 0, integer.length, options, info) : integer;\n  if (fraction) {\n    formattedValue += symbols.decimal + fraction;\n  }\n  var pattern;\n  if (isCurrency && options.currencyDisplay === \"name\") {\n    pattern = currencyUnitPattern(info, number);\n  } else {\n    var patterns = options.patterns;\n    pattern = negative || negativeZero ? patterns[1] || \"-\" + patterns[0] : patterns[0];\n  }\n  if (pattern === NUMBER_PLACEHOLDER && !negative) {\n    return formattedValue;\n  }\n  var result = applyPattern(formattedValue, pattern, symbol);\n  return result;\n}","map":{"version":3,"names":["PERCENT","SCIENTIFIC","NUMBER_PLACEHOLDER","CURRENCY_PLACEHOLDER","PERCENT_PLACEHOLDER","EMPTY","POINT","isNegativeZero","formatCurrencySymbol","groupInteger","isCurrencyStyle","pad","round","currencyFractionOptions","DEFAULT_DECIMAL_ROUNDING","DEFAULT_PERCENT_ROUNDING","trailingZeroRegex","fractionOptions","options","minimumFractionDigits","maximumFractionDigits","style","isCurrency","currencyFractions","currency","undefined","Math","max","applyPattern","value","pattern","symbol","result","idx","length","ch","charAt","currencyUnitPattern","info","currencyInfo","numbers","replace","standardNumberFormat","number","symbols","exponential","toExponential","decimal","percentSign","ref","negative","negativeZero","parts","split","integer","fraction","substring","minimumIntegerDigits","formattedValue","useGrouping","currencyDisplay","patterns"],"sources":["/home/shermannatrix/RnD/ttg-kendoreact/forms/getting-started/node_modules/@progress/kendo-intl/dist/es/numbers/standard-number-format.js"],"sourcesContent":["import { PERCENT, SCIENTIFIC, NUMBER_PLACEHOLDER, CURRENCY_PLACEHOLDER, PERCENT_PLACEHOLDER, EMPTY, POINT } from '../common/constants';\nimport isNegativeZero from '../common/is-negative-zero';\nimport formatCurrencySymbol from './format-currency-symbol';\nimport groupInteger from './group-integer';\nimport isCurrencyStyle from './is-currency-style';\nimport pad from '../common/pad';\nimport round from '../common/round';\nimport { currencyFractionOptions } from '../cldr';\n\nvar DEFAULT_DECIMAL_ROUNDING = 3;\nvar DEFAULT_PERCENT_ROUNDING = 0;\n\nvar trailingZeroRegex = /0+$/;\n\nfunction fractionOptions(options) {\n    var minimumFractionDigits = options.minimumFractionDigits;\n    var maximumFractionDigits = options.maximumFractionDigits;\n    var style = options.style;\n    var isCurrency = isCurrencyStyle(style);\n    var currencyFractions;\n    if (isCurrency) {\n        currencyFractions = currencyFractionOptions(options.currency);\n    }\n\n    if (minimumFractionDigits === undefined) {\n        minimumFractionDigits = isCurrency ? currencyFractions.minimumFractionDigits : 0;\n    }\n\n    if (maximumFractionDigits === undefined) {\n        if (style === PERCENT) {\n            maximumFractionDigits = Math.max(minimumFractionDigits, DEFAULT_PERCENT_ROUNDING);\n        } else if (isCurrency) {\n            maximumFractionDigits = Math.max(minimumFractionDigits, currencyFractions.maximumFractionDigits);\n        } else {\n            maximumFractionDigits = Math.max(minimumFractionDigits, DEFAULT_DECIMAL_ROUNDING);\n        }\n    }\n\n    return {\n        minimumFractionDigits: minimumFractionDigits,\n        maximumFractionDigits: maximumFractionDigits\n    };\n}\n\nfunction applyPattern(value, pattern, symbol) {\n    var result = EMPTY;\n    for (var idx = 0, length = pattern.length; idx < length; idx++) {\n        var ch = pattern.charAt(idx);\n\n        if (ch === NUMBER_PLACEHOLDER) {\n            result += value;\n        } else if (ch === CURRENCY_PLACEHOLDER || ch === PERCENT_PLACEHOLDER) {\n            result += symbol;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n\nfunction currencyUnitPattern(info, value) {\n    var currencyInfo = info.numbers.currency;\n    var pattern = value !== 1 ? currencyInfo[\"unitPattern-count-other\"] : currencyInfo[\"unitPattern-count-one\"];\n    if (value < 0) {\n        pattern = pattern.replace(NUMBER_PLACEHOLDER, (\"-\" + NUMBER_PLACEHOLDER));\n    }\n\n    return pattern;\n}\n\n\nexport default function standardNumberFormat(number, options, info) {\n    var symbols = info.numbers.symbols;\n    var style = options.style;\n    var isCurrency = isCurrencyStyle(style);\n\n    //return number in exponential format\n    if (style === SCIENTIFIC) {\n        var exponential = options.minimumFractionDigits !== undefined ? number.toExponential(options.minimumFractionDigits) : number.toExponential();\n        return exponential.replace(POINT, symbols.decimal);\n    }\n\n    var value = number;\n    var symbol;\n\n    if (isCurrency) {\n        options.value = value;\n        symbol = formatCurrencySymbol(info, options);\n    }\n\n    if (style === PERCENT) {\n        value *= 100;\n        symbol = symbols.percentSign;\n    }\n\n    var ref = fractionOptions(options);\n    var minimumFractionDigits = ref.minimumFractionDigits;\n    var maximumFractionDigits = ref.maximumFractionDigits;\n\n    value = round(value, maximumFractionDigits);\n\n    var negative = value < 0;\n    var negativeZero = isNegativeZero(number);\n\n    var parts = value.split(POINT);\n\n    var integer = parts[0];\n    var fraction = pad(parts[1] ? parts[1].replace(trailingZeroRegex, EMPTY) : EMPTY, minimumFractionDigits, true);\n\n    //exclude \"-\" if number is negative.\n    if (negative) {\n        integer = integer.substring(1);\n    }\n\n    if (options.minimumIntegerDigits) {\n        integer = pad(integer, options.minimumIntegerDigits);\n    }\n\n    var formattedValue = options.useGrouping !== false ? groupInteger(integer, 0, integer.length, options, info) : integer;\n\n    if (fraction) {\n        formattedValue += symbols.decimal + fraction;\n    }\n\n    var pattern;\n\n    if (isCurrency && options.currencyDisplay === \"name\") {\n        pattern = currencyUnitPattern(info, number);\n    } else {\n        var patterns = options.patterns;\n        pattern = (negative || negativeZero) ? patterns[1] || (\"-\" + patterns[0]) : patterns[0];\n    }\n\n    if (pattern === NUMBER_PLACEHOLDER && !negative) {\n        return formattedValue;\n    }\n\n    var result = applyPattern(formattedValue, pattern, symbol);\n\n    return result;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}