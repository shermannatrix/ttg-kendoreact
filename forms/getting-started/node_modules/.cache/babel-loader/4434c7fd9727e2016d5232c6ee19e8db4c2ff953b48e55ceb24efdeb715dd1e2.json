{"ast":null,"code":"import { zoneAndRule } from './zone-and-rule';\n// tslint:disable:max-line-length\n/**\n * A function which returns the abbreviated name of the timezone. You can specify an optional date for returning the timezone name at a different point in time. The corresponding UTC date is used for locating the relevant rule. Timezone names change both historically and when they reflect the Daylight Savings Time rules.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param date - A date for which to locate the zone rule. By default, the current time is used.\n *\n * @return - The abbreviated name of the timezone at the specified date or, if not set, returns now.\n *\n * @example\n * ```ts-no-run\n * import { abbrTimezone } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/Europe/Sofia';\n *\n * const dstDate = new Date('2018-04-01T00:00:00Z');\n * console.log(abbrTimezone('Europe/Sofia', dstDate)); // EEST\n *\n * const date = new Date('2018-01-01T00:00:00Z');\n * console.log(abbrTimezone('Europe/Sofia', date)); // EET\n * ```\n */\n// tslint:enable:max-line-length\nexport var abbrTimezone = function (timezone, date) {\n  if (date === void 0) {\n    date = new Date();\n  }\n  if (timezone === \"Etc/UTC\") {\n    return 'UTC';\n  }\n  if (timezone === \"Etc/GMT\") {\n    return 'GMT';\n  }\n  if (timezone === '') {\n    return '';\n  }\n  var _a = zoneAndRule(timezone, date),\n    zone = _a.zone,\n    rule = _a.rule;\n  var base = zone[2];\n  if (base.indexOf(\"/\") >= 0) {\n    return base.split(\"/\")[rule && +rule[6] ? 1 : 0];\n  } else if (base.indexOf(\"%s\") >= 0) {\n    return base.replace(\"%s\", !rule || rule[7] === \"-\" ? '' : rule[7]);\n  }\n  return base;\n};","map":{"version":3,"names":["zoneAndRule","abbrTimezone","timezone","date","Date","_a","zone","rule","base","indexOf","split","replace"],"sources":["/home/shermannatrix/RnD/ttg-kendoreact/forms/getting-started/node_modules/@progress/kendo-date-math/dist/es/tz/abbr-timezone.js"],"sourcesContent":["import { zoneAndRule } from './zone-and-rule';\n// tslint:disable:max-line-length\n/**\n * A function which returns the abbreviated name of the timezone. You can specify an optional date for returning the timezone name at a different point in time. The corresponding UTC date is used for locating the relevant rule. Timezone names change both historically and when they reflect the Daylight Savings Time rules.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param date - A date for which to locate the zone rule. By default, the current time is used.\n *\n * @return - The abbreviated name of the timezone at the specified date or, if not set, returns now.\n *\n * @example\n * ```ts-no-run\n * import { abbrTimezone } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/Europe/Sofia';\n *\n * const dstDate = new Date('2018-04-01T00:00:00Z');\n * console.log(abbrTimezone('Europe/Sofia', dstDate)); // EEST\n *\n * const date = new Date('2018-01-01T00:00:00Z');\n * console.log(abbrTimezone('Europe/Sofia', date)); // EET\n * ```\n */\n// tslint:enable:max-line-length\nexport var abbrTimezone = function (timezone, date) {\n    if (date === void 0) { date = new Date(); }\n    if (timezone === \"Etc/UTC\") {\n        return 'UTC';\n    }\n    if (timezone === \"Etc/GMT\") {\n        return 'GMT';\n    }\n    if (timezone === '') {\n        return '';\n    }\n    var _a = zoneAndRule(timezone, date), zone = _a.zone, rule = _a.rule;\n    var base = zone[2];\n    if (base.indexOf(\"/\") >= 0) {\n        return base.split(\"/\")[rule && +rule[6] ? 1 : 0];\n    }\n    else if (base.indexOf(\"%s\") >= 0) {\n        return base.replace(\"%s\", (!rule || rule[7] === \"-\") ? '' : rule[7]);\n    }\n    return base;\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,YAAY,GAAG,SAAAA,CAAUC,QAAQ,EAAEC,IAAI,EAAE;EAChD,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IAAEA,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EAAE;EAC1C,IAAIF,QAAQ,KAAK,SAAS,EAAE;IACxB,OAAO,KAAK;EAChB;EACA,IAAIA,QAAQ,KAAK,SAAS,EAAE;IACxB,OAAO,KAAK;EAChB;EACA,IAAIA,QAAQ,KAAK,EAAE,EAAE;IACjB,OAAO,EAAE;EACb;EACA,IAAIG,EAAE,GAAGL,WAAW,CAACE,QAAQ,EAAEC,IAAI,CAAC;IAAEG,IAAI,GAAGD,EAAE,CAACC,IAAI;IAAEC,IAAI,GAAGF,EAAE,CAACE,IAAI;EACpE,IAAIC,IAAI,GAAGF,IAAI,CAAC,CAAC,CAAC;EAClB,IAAIE,IAAI,CAACC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;IACxB,OAAOD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACH,IAAI,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACpD,CAAC,MACI,IAAIC,IAAI,CAACC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;IAC9B,OAAOD,IAAI,CAACG,OAAO,CAAC,IAAI,EAAG,CAACJ,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,GAAI,EAAE,GAAGA,IAAI,CAAC,CAAC,CAAC,CAAC;EACxE;EACA,OAAOC,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}