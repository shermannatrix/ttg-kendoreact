{"ast":null,"code":"/**\n * @license\n *-------------------------------------------------------------------------------------------\n * Copyright © 2024 Progress Software Corporation. All rights reserved.\n * Licensed under commercial license. See LICENSE.md in the package root for more information\n *-------------------------------------------------------------------------------------------\n */\n\"use client\";\n\nimport { messages as t } from \"./messages.mjs\";\nclass r {\n  constructor(e) {\n    if (this.language = e, e === \"\" && process.env.NODE_ENV !== \"production\") throw \"Language should not be an empty string\";\n  }\n  /* eslint-disable max-len */\n  /**\n   * Provides a string based on a key for the current language. When no string for the current language is available under this key, the `defaultValue` is returned.\n   *\n   * @param key - The key which identifies the string for the current language.\n   * @param defaultValue - The default value which will be returned when no string\n   * for the current language is available under the key.\n   * @return - The string for the current language.\n   */\n  // tslint:enable:max-line-length\n  toLanguageString(e, a) {\n    return this.language && t[this.language] && t[this.language].hasOwnProperty(e) ? t[this.language][e] : a;\n  }\n}\nexport { r as LocalizationService };","map":{"version":3,"names":["messages","t","r","constructor","e","language","process","env","NODE_ENV","toLanguageString","a","hasOwnProperty","LocalizationService"],"sources":["/home/shermannatrix/RnD/ttg-kendoreact/forms/getting-started/node_modules/@progress/kendo-react-intl/Localization/LocalizationService.mjs"],"sourcesContent":["/**\n * @license\n *-------------------------------------------------------------------------------------------\n * Copyright © 2024 Progress Software Corporation. All rights reserved.\n * Licensed under commercial license. See LICENSE.md in the package root for more information\n *-------------------------------------------------------------------------------------------\n */\n\"use client\";\nimport { messages as t } from \"./messages.mjs\";\nclass r {\n  constructor(e) {\n    if (this.language = e, e === \"\" && process.env.NODE_ENV !== \"production\")\n      throw \"Language should not be an empty string\";\n  }\n  /* eslint-disable max-len */\n  /**\n   * Provides a string based on a key for the current language. When no string for the current language is available under this key, the `defaultValue` is returned.\n   *\n   * @param key - The key which identifies the string for the current language.\n   * @param defaultValue - The default value which will be returned when no string\n   * for the current language is available under the key.\n   * @return - The string for the current language.\n   */\n  // tslint:enable:max-line-length\n  toLanguageString(e, a) {\n    return this.language && t[this.language] && t[this.language].hasOwnProperty(e) ? t[this.language][e] : a;\n  }\n}\nexport {\n  r as LocalizationService\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AACZ,SAASA,QAAQ,IAAIC,CAAC,QAAQ,gBAAgB;AAC9C,MAAMC,CAAC,CAAC;EACNC,WAAWA,CAACC,CAAC,EAAE;IACb,IAAI,IAAI,CAACC,QAAQ,GAAGD,CAAC,EAAEA,CAAC,KAAK,EAAE,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EACtE,MAAM,wCAAwC;EAClD;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAC,gBAAgBA,CAACL,CAAC,EAAEM,CAAC,EAAE;IACrB,OAAO,IAAI,CAACL,QAAQ,IAAIJ,CAAC,CAAC,IAAI,CAACI,QAAQ,CAAC,IAAIJ,CAAC,CAAC,IAAI,CAACI,QAAQ,CAAC,CAACM,cAAc,CAACP,CAAC,CAAC,GAAGH,CAAC,CAAC,IAAI,CAACI,QAAQ,CAAC,CAACD,CAAC,CAAC,GAAGM,CAAC;EAC1G;AACF;AACA,SACER,CAAC,IAAIU,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}