{"ast":null,"code":"import QuadRoot from './quad-root';\nimport QuadNode from './quad-node';\nimport { Rect } from '../geometry';\nimport { Class } from '../common';\nimport { append } from '../util';\nvar ROOT_SIZE = 3000;\nvar LEVEL_STEP = 10000;\nvar MAX_LEVEL = 75;\nvar ShapesQuadTree = function (Class) {\n  function ShapesQuadTree() {\n    Class.call(this);\n    this.initRoots();\n  }\n  if (Class) ShapesQuadTree.__proto__ = Class;\n  ShapesQuadTree.prototype = Object.create(Class && Class.prototype);\n  ShapesQuadTree.prototype.constructor = ShapesQuadTree;\n  ShapesQuadTree.prototype.initRoots = function initRoots() {\n    this.rootMap = {};\n    this.root = new QuadRoot();\n    this.rootElements = [];\n  };\n  ShapesQuadTree.prototype.clear = function clear() {\n    var this$1 = this;\n    var rootElements = this.rootElements;\n    for (var idx = 0; idx < rootElements.length; idx++) {\n      this$1.remove(rootElements[idx]);\n    }\n    this.initRoots();\n  };\n  ShapesQuadTree.prototype.pointShape = function pointShape(point) {\n    var sectorRoot = (this.rootMap[Math.floor(point.x / ROOT_SIZE)] || {})[Math.floor(point.y / ROOT_SIZE)];\n    var result = this.root.pointShapes(point);\n    if (sectorRoot) {\n      result = result.concat(sectorRoot.pointShapes(point));\n    }\n    this.assignZindex(result);\n    result.sort(zIndexComparer);\n    for (var idx = 0; idx < result.length; idx++) {\n      if (result[idx].containsPoint(point)) {\n        return result[idx];\n      }\n    }\n  };\n  ShapesQuadTree.prototype.assignZindex = function assignZindex(elements) {\n    var this$1 = this;\n    for (var idx = 0; idx < elements.length; idx++) {\n      var element = elements[idx];\n      var zIndex = 0;\n      var levelWeight = Math.pow(LEVEL_STEP, MAX_LEVEL);\n      var parents = [];\n      while (element) {\n        parents.push(element);\n        element = element.parent;\n      }\n      while (parents.length) {\n        element = parents.pop();\n        zIndex += ((element.parent ? element.parent.children : this$1.rootElements).indexOf(element) + 1) * levelWeight;\n        levelWeight /= LEVEL_STEP;\n      }\n      elements[idx]._zIndex = zIndex;\n    }\n  };\n  ShapesQuadTree.prototype.optionsChange = function optionsChange(e) {\n    if (e.field === \"transform\" || e.field === \"stroke.width\") {\n      this.bboxChange(e.element);\n    }\n  };\n  ShapesQuadTree.prototype.geometryChange = function geometryChange(e) {\n    this.bboxChange(e.element);\n  };\n  ShapesQuadTree.prototype.bboxChange = function bboxChange(element) {\n    var this$1 = this;\n    if (element.nodeType === \"Group\") {\n      for (var idx = 0; idx < element.children.length; idx++) {\n        this$1.bboxChange(element.children[idx]);\n      }\n    } else {\n      if (element._quadNode) {\n        element._quadNode.remove(element);\n      }\n      this._insertShape(element);\n    }\n  };\n  ShapesQuadTree.prototype.add = function add(elements) {\n    var elementsArray = Array.isArray(elements) ? elements.slice(0) : [elements];\n    append(this.rootElements, elementsArray);\n    this._insert(elementsArray);\n  };\n  ShapesQuadTree.prototype.childrenChange = function childrenChange(e) {\n    var this$1 = this;\n    if (e.action === \"remove\") {\n      for (var idx = 0; idx < e.items.length; idx++) {\n        this$1.remove(e.items[idx]);\n      }\n    } else {\n      this._insert(Array.prototype.slice.call(e.items, 0));\n    }\n  };\n  ShapesQuadTree.prototype._insert = function _insert(elements) {\n    var this$1 = this;\n    var element;\n    while (elements.length > 0) {\n      element = elements.pop();\n      element.addObserver(this$1);\n      if (element.nodeType === \"Group\") {\n        append(elements, element.children);\n      } else {\n        this$1._insertShape(element);\n      }\n    }\n  };\n  ShapesQuadTree.prototype._insertShape = function _insertShape(shape) {\n    var bbox = shape.bbox();\n    if (bbox) {\n      var sectors = this.getSectors(bbox);\n      var x = sectors[0][0];\n      var y = sectors[1][0];\n      if (this.inRoot(sectors)) {\n        this.root.insert(shape, bbox);\n      } else {\n        var rootMap = this.rootMap;\n        if (!rootMap[x]) {\n          rootMap[x] = {};\n        }\n        if (!rootMap[x][y]) {\n          rootMap[x][y] = new QuadNode(new Rect([x * ROOT_SIZE, y * ROOT_SIZE], [ROOT_SIZE, ROOT_SIZE]));\n        }\n        rootMap[x][y].insert(shape, bbox);\n      }\n    }\n  };\n  ShapesQuadTree.prototype.remove = function remove(element) {\n    var this$1 = this;\n    element.removeObserver(this);\n    if (element.nodeType === \"Group\") {\n      var children = element.children;\n      for (var idx = 0; idx < children.length; idx++) {\n        this$1.remove(children[idx]);\n      }\n    } else if (element._quadNode) {\n      element._quadNode.remove(element);\n      delete element._quadNode;\n    }\n  };\n  ShapesQuadTree.prototype.inRoot = function inRoot(sectors) {\n    return sectors[0].length > 1 || sectors[1].length > 1;\n  };\n  ShapesQuadTree.prototype.getSectors = function getSectors(rect) {\n    var bottomRight = rect.bottomRight();\n    var bottomX = Math.floor(bottomRight.x / ROOT_SIZE);\n    var bottomY = Math.floor(bottomRight.y / ROOT_SIZE);\n    var sectors = [[], []];\n    for (var x = Math.floor(rect.origin.x / ROOT_SIZE); x <= bottomX; x++) {\n      sectors[0].push(x);\n    }\n    for (var y = Math.floor(rect.origin.y / ROOT_SIZE); y <= bottomY; y++) {\n      sectors[1].push(y);\n    }\n    return sectors;\n  };\n  return ShapesQuadTree;\n}(Class);\nfunction zIndexComparer(x1, x2) {\n  if (x1._zIndex < x2._zIndex) {\n    return 1;\n  }\n  if (x1._zIndex > x2._zIndex) {\n    return -1;\n  }\n  return 0;\n}\nexport default ShapesQuadTree;","map":{"version":3,"names":["QuadRoot","QuadNode","Rect","Class","append","ROOT_SIZE","LEVEL_STEP","MAX_LEVEL","ShapesQuadTree","call","initRoots","__proto__","prototype","Object","create","constructor","rootMap","root","rootElements","clear","this$1","idx","length","remove","pointShape","point","sectorRoot","Math","floor","x","y","result","pointShapes","concat","assignZindex","sort","zIndexComparer","containsPoint","elements","element","zIndex","levelWeight","pow","parents","push","parent","pop","children","indexOf","_zIndex","optionsChange","e","field","bboxChange","geometryChange","nodeType","_quadNode","_insertShape","add","elementsArray","Array","isArray","slice","_insert","childrenChange","action","items","addObserver","shape","bbox","sectors","getSectors","inRoot","insert","removeObserver","rect","bottomRight","bottomX","bottomY","origin","x1","x2"],"sources":["/home/shermannatrix/RnD/ttg-kendoreact/forms/getting-started/node_modules/@progress/kendo-drawing/dist/es/search/shapes-quad-tree.js"],"sourcesContent":["import QuadRoot from './quad-root';\nimport QuadNode from './quad-node';\nimport { Rect } from '../geometry';\nimport { Class } from '../common';\nimport { append } from '../util';\n\nvar ROOT_SIZE = 3000;\nvar LEVEL_STEP = 10000;\nvar MAX_LEVEL = 75;\n\nvar ShapesQuadTree = (function (Class) {\n    function ShapesQuadTree() {\n        Class.call(this);\n\n        this.initRoots();\n    }\n\n    if ( Class ) ShapesQuadTree.__proto__ = Class;\n    ShapesQuadTree.prototype = Object.create( Class && Class.prototype );\n    ShapesQuadTree.prototype.constructor = ShapesQuadTree;\n\n    ShapesQuadTree.prototype.initRoots = function initRoots () {\n        this.rootMap = {};\n        this.root = new QuadRoot();\n        this.rootElements = [];\n    };\n\n    ShapesQuadTree.prototype.clear = function clear () {\n        var this$1 = this;\n\n        var rootElements = this.rootElements;\n        for (var idx = 0; idx < rootElements.length; idx++) {\n            this$1.remove(rootElements[idx]);\n        }\n        this.initRoots();\n    };\n\n    ShapesQuadTree.prototype.pointShape = function pointShape (point) {\n        var sectorRoot = ( this.rootMap[ Math.floor( point.x / ROOT_SIZE ) ] || {} )[ Math.floor( point.y / ROOT_SIZE ) ];\n        var result = this.root.pointShapes(point);\n\n        if (sectorRoot) {\n            result = result.concat(sectorRoot.pointShapes(point));\n        }\n\n        this.assignZindex(result);\n\n        result.sort(zIndexComparer);\n        for (var idx = 0; idx < result.length; idx++) {\n            if (result[idx].containsPoint(point)) {\n                return result[idx];\n            }\n        }\n    };\n\n    ShapesQuadTree.prototype.assignZindex = function assignZindex (elements) {\n        var this$1 = this;\n\n        for (var idx = 0; idx < elements.length; idx++) {\n            var element = elements[idx];\n            var zIndex = 0;\n            var levelWeight = Math.pow(LEVEL_STEP, MAX_LEVEL);\n            var parents = [];\n\n            while (element) {\n                parents.push(element);\n                element = element.parent;\n            }\n\n            while (parents.length) {\n                element = parents.pop();\n                zIndex += ((element.parent ? element.parent.children : this$1.rootElements).indexOf(element) + 1) * levelWeight;\n                levelWeight /= LEVEL_STEP;\n            }\n\n            elements[idx]._zIndex = zIndex;\n        }\n    };\n\n    ShapesQuadTree.prototype.optionsChange = function optionsChange (e) {\n        if (e.field === \"transform\" || e.field === \"stroke.width\") {\n            this.bboxChange(e.element);\n        }\n    };\n\n    ShapesQuadTree.prototype.geometryChange = function geometryChange (e) {\n        this.bboxChange(e.element);\n    };\n\n    ShapesQuadTree.prototype.bboxChange = function bboxChange (element) {\n        var this$1 = this;\n\n        if (element.nodeType === \"Group\") {\n            for (var idx = 0; idx < element.children.length; idx++) {\n                this$1.bboxChange(element.children[idx]);\n            }\n        } else {\n            if (element._quadNode) {\n                element._quadNode.remove(element);\n            }\n            this._insertShape(element);\n        }\n    };\n\n    ShapesQuadTree.prototype.add = function add (elements) {\n        var elementsArray = Array.isArray(elements) ? elements.slice(0) : [ elements ];\n\n        append(this.rootElements, elementsArray);\n        this._insert(elementsArray);\n    };\n\n    ShapesQuadTree.prototype.childrenChange = function childrenChange (e) {\n        var this$1 = this;\n\n        if (e.action === \"remove\") {\n            for (var idx = 0; idx < e.items.length; idx++) {\n                this$1.remove(e.items[idx]);\n            }\n        } else {\n            this._insert(Array.prototype.slice.call(e.items, 0));\n        }\n    };\n\n    ShapesQuadTree.prototype._insert = function _insert (elements) {\n        var this$1 = this;\n\n        var element;\n\n        while (elements.length > 0) {\n            element = elements.pop();\n            element.addObserver(this$1);\n            if (element.nodeType === \"Group\") {\n                append(elements, element.children);\n            } else {\n                this$1._insertShape(element);\n            }\n        }\n    };\n\n    ShapesQuadTree.prototype._insertShape = function _insertShape (shape) {\n        var bbox = shape.bbox();\n        if (bbox) {\n            var sectors = this.getSectors(bbox);\n            var x = sectors[0][0];\n            var y = sectors[1][0];\n\n            if (this.inRoot(sectors)) {\n                this.root.insert(shape, bbox);\n            } else {\n                var rootMap = this.rootMap;\n                if (!rootMap[x]) {\n                    rootMap[x] = {};\n                }\n\n                if (!rootMap[x][y]) {\n                    rootMap[x][y] = new QuadNode(\n                        new Rect([ x * ROOT_SIZE, y * ROOT_SIZE ], [ ROOT_SIZE, ROOT_SIZE ])\n                    );\n                }\n\n                rootMap[x][y].insert(shape, bbox);\n            }\n        }\n    };\n\n    ShapesQuadTree.prototype.remove = function remove (element) {\n        var this$1 = this;\n\n        element.removeObserver(this);\n\n        if (element.nodeType === \"Group\") {\n            var children = element.children;\n            for (var idx = 0; idx < children.length; idx++) {\n                this$1.remove(children[idx]);\n            }\n        } else if (element._quadNode) {\n            element._quadNode.remove(element);\n            delete element._quadNode;\n        }\n    };\n\n    ShapesQuadTree.prototype.inRoot = function inRoot (sectors) {\n        return sectors[0].length > 1 || sectors[1].length > 1;\n    };\n\n    ShapesQuadTree.prototype.getSectors = function getSectors (rect) {\n        var bottomRight = rect.bottomRight();\n        var bottomX = Math.floor(bottomRight.x / ROOT_SIZE);\n        var bottomY = Math.floor(bottomRight.y / ROOT_SIZE);\n        var sectors = [ [], [] ];\n        for (var x = Math.floor(rect.origin.x / ROOT_SIZE); x <= bottomX; x++) {\n            sectors[0].push(x);\n        }\n        for (var y = Math.floor(rect.origin.y / ROOT_SIZE); y <= bottomY; y++) {\n            sectors[1].push(y);\n        }\n        return sectors;\n    };\n\n    return ShapesQuadTree;\n}(Class));\n\nfunction zIndexComparer(x1, x2) {\n    if (x1._zIndex < x2._zIndex) {\n        return 1;\n    }\n    if (x1._zIndex > x2._zIndex) {\n        return -1;\n    }\n\n    return 0;\n}\n\nexport default ShapesQuadTree;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}