{"ast":null,"code":"/**\n * @license\n *-------------------------------------------------------------------------------------------\n * Copyright © 2024 Progress Software Corporation. All rights reserved.\n * Licensed under commercial license. See LICENSE.md in the package root for more information\n *-------------------------------------------------------------------------------------------\n */\n\"use client\";\n\nimport * as e from \"react\";\nimport n from \"prop-types\";\nimport { LocalizationService as a } from \"./LocalizationService.mjs\";\nimport { GlobalizationContext as r } from \"../globalization/GlobalizationContext.mjs\";\nconst t = class t extends e.Component {\n  /**\n   * Returns a localization service. The method is suitable for overriding when you implement custom localization behavior.\n   */\n  getLocalizationService() {\n    return new a(this.props.language);\n  }\n  /**\n   * @hidden\n   */\n  render() {\n    return /* @__PURE__ */e.createElement(r.Consumer, null, i => /* @__PURE__ */e.createElement(r.Provider, {\n      value: {\n        ...i,\n        localization: this.getLocalizationService()\n      }\n    }, this.props.children));\n  }\n};\nt.propTypes = {\n  language: n.string\n};\nlet o = t;\nexport { o as LocalizationProvider };","map":{"version":3,"names":["e","n","LocalizationService","a","GlobalizationContext","r","t","Component","getLocalizationService","props","language","render","createElement","Consumer","i","Provider","value","localization","children","propTypes","string","o","LocalizationProvider"],"sources":["/home/shermannatrix/RnD/ttg-kendoreact/getting-started/first-kr-app/node_modules/@progress/kendo-react-intl/Localization/LocalizationProvider.mjs"],"sourcesContent":["/**\n * @license\n *-------------------------------------------------------------------------------------------\n * Copyright © 2024 Progress Software Corporation. All rights reserved.\n * Licensed under commercial license. See LICENSE.md in the package root for more information\n *-------------------------------------------------------------------------------------------\n */\n\"use client\";\nimport * as e from \"react\";\nimport n from \"prop-types\";\nimport { LocalizationService as a } from \"./LocalizationService.mjs\";\nimport { GlobalizationContext as r } from \"../globalization/GlobalizationContext.mjs\";\nconst t = class t extends e.Component {\n  /**\n   * Returns a localization service. The method is suitable for overriding when you implement custom localization behavior.\n   */\n  getLocalizationService() {\n    return new a(this.props.language);\n  }\n  /**\n   * @hidden\n   */\n  render() {\n    return /* @__PURE__ */ e.createElement(r.Consumer, null, (i) => /* @__PURE__ */ e.createElement(r.Provider, { value: { ...i, localization: this.getLocalizationService() } }, this.props.children));\n  }\n};\nt.propTypes = {\n  language: n.string\n};\nlet o = t;\nexport {\n  o as LocalizationProvider\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AACZ,OAAO,KAAKA,CAAC,MAAM,OAAO;AAC1B,OAAOC,CAAC,MAAM,YAAY;AAC1B,SAASC,mBAAmB,IAAIC,CAAC,QAAQ,2BAA2B;AACpE,SAASC,oBAAoB,IAAIC,CAAC,QAAQ,2CAA2C;AACrF,MAAMC,CAAC,GAAG,MAAMA,CAAC,SAASN,CAAC,CAACO,SAAS,CAAC;EACpC;AACF;AACA;EACEC,sBAAsBA,CAAA,EAAG;IACvB,OAAO,IAAIL,CAAC,CAAC,IAAI,CAACM,KAAK,CAACC,QAAQ,CAAC;EACnC;EACA;AACF;AACA;EACEC,MAAMA,CAAA,EAAG;IACP,OAAO,eAAgBX,CAAC,CAACY,aAAa,CAACP,CAAC,CAACQ,QAAQ,EAAE,IAAI,EAAGC,CAAC,IAAK,eAAgBd,CAAC,CAACY,aAAa,CAACP,CAAC,CAACU,QAAQ,EAAE;MAAEC,KAAK,EAAE;QAAE,GAAGF,CAAC;QAAEG,YAAY,EAAE,IAAI,CAACT,sBAAsB,CAAC;MAAE;IAAE,CAAC,EAAE,IAAI,CAACC,KAAK,CAACS,QAAQ,CAAC,CAAC;EACrM;AACF,CAAC;AACDZ,CAAC,CAACa,SAAS,GAAG;EACZT,QAAQ,EAAET,CAAC,CAACmB;AACd,CAAC;AACD,IAAIC,CAAC,GAAGf,CAAC;AACT,SACEe,CAAC,IAAIC,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}