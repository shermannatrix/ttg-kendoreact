{"ast":null,"code":"import Point from '../geometry/point';\nimport ShapeMap from './shape-map';\nvar SEGMENT_REGEX = /([a-df-z]{1})([^a-df-z]*)(z)?/gi;\nvar SPLIT_REGEX = /[,\\s]?([+\\-]?(?:\\d*\\.\\d+|\\d+)(?:[eE][+\\-]?\\d+)?)/g;\nvar MOVE = \"m\";\nvar CLOSE = \"z\";\nfunction parseParameters(str) {\n  var parameters = [];\n  str.replace(SPLIT_REGEX, function (match, number) {\n    parameters.push(parseFloat(number));\n  });\n  return parameters;\n}\nfunction parsePath(pathInstance, str) {\n  var position = new Point();\n  var previousCommand;\n  str.replace(SEGMENT_REGEX, function (match, element, params, closePath) {\n    var command = element.toLowerCase();\n    var isRelative = command === element;\n    var parameters = parseParameters(params.trim());\n    if (command === MOVE) {\n      if (isRelative) {\n        position.x += parameters[0];\n        position.y += parameters[1];\n      } else {\n        position.x = parameters[0];\n        position.y = parameters[1];\n      }\n      pathInstance.moveTo(position.x, position.y);\n      if (parameters.length > 2) {\n        command = \"l\";\n        parameters.splice(0, 2);\n      }\n    }\n    if (ShapeMap[command]) {\n      ShapeMap[command](pathInstance, {\n        parameters: parameters,\n        position: position,\n        isRelative: isRelative,\n        previousCommand: previousCommand\n      });\n      if (closePath && closePath.toLowerCase() === CLOSE) {\n        pathInstance.close();\n      }\n    } else if (command !== MOVE) {\n      throw new Error(\"Error while parsing SVG path. Unsupported command: \" + command);\n    }\n    previousCommand = command;\n  });\n  return pathInstance;\n}\nexport default parsePath;","map":{"version":3,"names":["Point","ShapeMap","SEGMENT_REGEX","SPLIT_REGEX","MOVE","CLOSE","parseParameters","str","parameters","replace","match","number","push","parseFloat","parsePath","pathInstance","position","previousCommand","element","params","closePath","command","toLowerCase","isRelative","trim","x","y","moveTo","length","splice","close","Error"],"sources":["/home/shermannatrix/RnD/ttg-kendoreact/forms/getting-started/node_modules/@progress/kendo-drawing/dist/es/parsing/parse-path.js"],"sourcesContent":["import Point from '../geometry/point';\nimport ShapeMap from './shape-map';\n\nvar SEGMENT_REGEX = /([a-df-z]{1})([^a-df-z]*)(z)?/gi;\nvar SPLIT_REGEX = /[,\\s]?([+\\-]?(?:\\d*\\.\\d+|\\d+)(?:[eE][+\\-]?\\d+)?)/g;\nvar MOVE = \"m\";\nvar CLOSE = \"z\";\n\nfunction parseParameters(str) {\n    var parameters = [];\n    str.replace(SPLIT_REGEX, function(match, number) {\n        parameters.push(parseFloat(number));\n    });\n    return parameters;\n}\n\nfunction parsePath(pathInstance, str) {\n    var position = new Point();\n    var previousCommand;\n\n    str.replace(SEGMENT_REGEX, function (match, element, params, closePath) {\n        var command = element.toLowerCase();\n        var isRelative = command === element;\n        var parameters = parseParameters(params.trim());\n\n        if (command === MOVE) {\n            if (isRelative) {\n                position.x += parameters[0];\n                position.y += parameters[1];\n            } else {\n                position.x = parameters[0];\n                position.y = parameters[1];\n            }\n\n            pathInstance.moveTo(position.x, position.y);\n\n            if (parameters.length > 2) {\n                command = \"l\";\n                parameters.splice(0, 2);\n            }\n        }\n\n        if (ShapeMap[command]) {\n            ShapeMap[command](\n                pathInstance, {\n                    parameters: parameters,\n                    position: position,\n                    isRelative: isRelative,\n                    previousCommand: previousCommand\n                }\n            );\n\n            if (closePath && closePath.toLowerCase() === CLOSE) {\n                pathInstance.close();\n            }\n        } else if (command !== MOVE) {\n            throw new Error(\"Error while parsing SVG path. Unsupported command: \" + command);\n        }\n\n        previousCommand = command;\n    });\n\n    return pathInstance;\n}\n\nexport default parsePath;\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,mBAAmB;AACrC,OAAOC,QAAQ,MAAM,aAAa;AAElC,IAAIC,aAAa,GAAG,iCAAiC;AACrD,IAAIC,WAAW,GAAG,mDAAmD;AACrE,IAAIC,IAAI,GAAG,GAAG;AACd,IAAIC,KAAK,GAAG,GAAG;AAEf,SAASC,eAAeA,CAACC,GAAG,EAAE;EAC1B,IAAIC,UAAU,GAAG,EAAE;EACnBD,GAAG,CAACE,OAAO,CAACN,WAAW,EAAE,UAASO,KAAK,EAAEC,MAAM,EAAE;IAC7CH,UAAU,CAACI,IAAI,CAACC,UAAU,CAACF,MAAM,CAAC,CAAC;EACvC,CAAC,CAAC;EACF,OAAOH,UAAU;AACrB;AAEA,SAASM,SAASA,CAACC,YAAY,EAAER,GAAG,EAAE;EAClC,IAAIS,QAAQ,GAAG,IAAIhB,KAAK,CAAC,CAAC;EAC1B,IAAIiB,eAAe;EAEnBV,GAAG,CAACE,OAAO,CAACP,aAAa,EAAE,UAAUQ,KAAK,EAAEQ,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAE;IACpE,IAAIC,OAAO,GAAGH,OAAO,CAACI,WAAW,CAAC,CAAC;IACnC,IAAIC,UAAU,GAAGF,OAAO,KAAKH,OAAO;IACpC,IAAIV,UAAU,GAAGF,eAAe,CAACa,MAAM,CAACK,IAAI,CAAC,CAAC,CAAC;IAE/C,IAAIH,OAAO,KAAKjB,IAAI,EAAE;MAClB,IAAImB,UAAU,EAAE;QACZP,QAAQ,CAACS,CAAC,IAAIjB,UAAU,CAAC,CAAC,CAAC;QAC3BQ,QAAQ,CAACU,CAAC,IAAIlB,UAAU,CAAC,CAAC,CAAC;MAC/B,CAAC,MAAM;QACHQ,QAAQ,CAACS,CAAC,GAAGjB,UAAU,CAAC,CAAC,CAAC;QAC1BQ,QAAQ,CAACU,CAAC,GAAGlB,UAAU,CAAC,CAAC,CAAC;MAC9B;MAEAO,YAAY,CAACY,MAAM,CAACX,QAAQ,CAACS,CAAC,EAAET,QAAQ,CAACU,CAAC,CAAC;MAE3C,IAAIlB,UAAU,CAACoB,MAAM,GAAG,CAAC,EAAE;QACvBP,OAAO,GAAG,GAAG;QACbb,UAAU,CAACqB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MAC3B;IACJ;IAEA,IAAI5B,QAAQ,CAACoB,OAAO,CAAC,EAAE;MACnBpB,QAAQ,CAACoB,OAAO,CAAC,CACbN,YAAY,EAAE;QACVP,UAAU,EAAEA,UAAU;QACtBQ,QAAQ,EAAEA,QAAQ;QAClBO,UAAU,EAAEA,UAAU;QACtBN,eAAe,EAAEA;MACrB,CACJ,CAAC;MAED,IAAIG,SAAS,IAAIA,SAAS,CAACE,WAAW,CAAC,CAAC,KAAKjB,KAAK,EAAE;QAChDU,YAAY,CAACe,KAAK,CAAC,CAAC;MACxB;IACJ,CAAC,MAAM,IAAIT,OAAO,KAAKjB,IAAI,EAAE;MACzB,MAAM,IAAI2B,KAAK,CAAC,qDAAqD,GAAGV,OAAO,CAAC;IACpF;IAEAJ,eAAe,GAAGI,OAAO;EAC7B,CAAC,CAAC;EAEF,OAAON,YAAY;AACvB;AAEA,eAAeD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}