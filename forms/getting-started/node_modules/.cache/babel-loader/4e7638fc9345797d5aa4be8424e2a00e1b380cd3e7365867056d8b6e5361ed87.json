{"ast":null,"code":"/**\n * @license\n *-------------------------------------------------------------------------------------------\n * Copyright © 2024 Progress Software Corporation. All rights reserved.\n * Licensed under commercial license. See LICENSE.md in the package root for more information\n *-------------------------------------------------------------------------------------------\n */\n\"use client\";\n\nimport * as e from \"react\";\nimport i from \"prop-types\";\nimport { IntlService as l } from \"./IntlService.mjs\";\nimport { GlobalizationContext as r } from \"../globalization/GlobalizationContext.mjs\";\nconst t = class t extends e.Component {\n  /**\n   * Returns an internationalization service. The method is suitable for overriding when you implement custom internationalization behavior.\n   */\n  getIntlService() {\n    return new l(this.props.locale);\n  }\n  /**\n   * @hidden\n   */\n  render() {\n    return /* @__PURE__ */e.createElement(r.Consumer, null, n => /* @__PURE__ */e.createElement(r.Provider, {\n      value: {\n        ...n,\n        intl: this.getIntlService()\n      }\n    }, this.props.children));\n  }\n};\nt.propTypes = {\n  locale: i.string\n};\nlet o = t;\nexport { o as IntlProvider };","map":{"version":3,"names":["e","i","IntlService","l","GlobalizationContext","r","t","Component","getIntlService","props","locale","render","createElement","Consumer","n","Provider","value","intl","children","propTypes","string","o","IntlProvider"],"sources":["/home/shermannatrix/RnD/ttg-kendoreact/getting-started/first-kr-app/node_modules/@progress/kendo-react-intl/Intl/IntlProvider.mjs"],"sourcesContent":["/**\n * @license\n *-------------------------------------------------------------------------------------------\n * Copyright © 2024 Progress Software Corporation. All rights reserved.\n * Licensed under commercial license. See LICENSE.md in the package root for more information\n *-------------------------------------------------------------------------------------------\n */\n\"use client\";\nimport * as e from \"react\";\nimport i from \"prop-types\";\nimport { IntlService as l } from \"./IntlService.mjs\";\nimport { GlobalizationContext as r } from \"../globalization/GlobalizationContext.mjs\";\nconst t = class t extends e.Component {\n  /**\n   * Returns an internationalization service. The method is suitable for overriding when you implement custom internationalization behavior.\n   */\n  getIntlService() {\n    return new l(this.props.locale);\n  }\n  /**\n   * @hidden\n   */\n  render() {\n    return /* @__PURE__ */ e.createElement(r.Consumer, null, (n) => /* @__PURE__ */ e.createElement(r.Provider, { value: { ...n, intl: this.getIntlService() } }, this.props.children));\n  }\n};\nt.propTypes = {\n  locale: i.string\n};\nlet o = t;\nexport {\n  o as IntlProvider\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AACZ,OAAO,KAAKA,CAAC,MAAM,OAAO;AAC1B,OAAOC,CAAC,MAAM,YAAY;AAC1B,SAASC,WAAW,IAAIC,CAAC,QAAQ,mBAAmB;AACpD,SAASC,oBAAoB,IAAIC,CAAC,QAAQ,2CAA2C;AACrF,MAAMC,CAAC,GAAG,MAAMA,CAAC,SAASN,CAAC,CAACO,SAAS,CAAC;EACpC;AACF;AACA;EACEC,cAAcA,CAAA,EAAG;IACf,OAAO,IAAIL,CAAC,CAAC,IAAI,CAACM,KAAK,CAACC,MAAM,CAAC;EACjC;EACA;AACF;AACA;EACEC,MAAMA,CAAA,EAAG;IACP,OAAO,eAAgBX,CAAC,CAACY,aAAa,CAACP,CAAC,CAACQ,QAAQ,EAAE,IAAI,EAAGC,CAAC,IAAK,eAAgBd,CAAC,CAACY,aAAa,CAACP,CAAC,CAACU,QAAQ,EAAE;MAAEC,KAAK,EAAE;QAAE,GAAGF,CAAC;QAAEG,IAAI,EAAE,IAAI,CAACT,cAAc,CAAC;MAAE;IAAE,CAAC,EAAE,IAAI,CAACC,KAAK,CAACS,QAAQ,CAAC,CAAC;EACrL;AACF,CAAC;AACDZ,CAAC,CAACa,SAAS,GAAG;EACZT,MAAM,EAAET,CAAC,CAACmB;AACZ,CAAC;AACD,IAAIC,CAAC,GAAGf,CAAC;AACT,SACEe,CAAC,IAAIC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}