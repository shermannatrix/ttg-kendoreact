{"ast":null,"code":"import { MS_PER_HOUR, MS_PER_MINUTE } from '../constants';\nimport { cloneDate } from '../clone-date';\nimport { abbrTimezone } from './abbr-timezone';\nimport { offset } from './offset';\nimport { toLocalDate } from './to-local-date';\nvar addMinutes = function (date, minutes) {\n  return new Date(date.getTime() + minutes * MS_PER_MINUTE);\n};\nvar addHours = function (date, hours) {\n  return new Date(date.getTime() + hours * MS_PER_HOUR);\n};\nvar dayAbbr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar monthAbbr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nvar datePrefix = function (utcDate) {\n  return dayAbbr[utcDate.getUTCDay()] + ' ' + monthAbbr[utcDate.getUTCMonth()];\n};\nvar padNumber = function (num, len) {\n  if (len === void 0) {\n    len = 2;\n  }\n  var sign = num < 0 ? '-' : '';\n  return sign + new Array(len).concat([Math.abs(num)]).join('0').slice(-len);\n};\nfunction isZoneMissingHour(date, timezone) {\n  var currentOffset = offset(timezone, date);\n  var prevHour = addHours(date, -1);\n  var prevOffset = offset(timezone, prevHour);\n  return currentOffset < prevOffset;\n}\nfunction shiftZoneMissingHour(utcDate, timezone) {\n  // Adjust for missing hour during DST transition in timezone.\n  var dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;\n  return addHours(utcDate, dstOffset);\n}\nfunction convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {\n  if (fromTimezone === toTimezone) {\n    return utcLocal;\n  }\n  var fromOffset = offset(fromTimezone, utcLocal);\n  var toOffset = offset(toTimezone, utcLocal);\n  var baseDiff = fromOffset - toOffset;\n  var midDate = addMinutes(utcLocal, baseDiff);\n  var midOffset = offset(toTimezone, midDate);\n  var dstDiff = toOffset - midOffset;\n  return addMinutes(utcLocal, baseDiff + dstDiff);\n}\nfunction formatOffset(tzOffset) {\n  var sign = tzOffset <= 0 ? '+' : '-';\n  var value = Math.abs(tzOffset);\n  var hours = padNumber(Math.floor(value / 60));\n  var minutes = padNumber(value % 60);\n  return \"GMT\" + sign + hours + minutes;\n}\n/**\n * Represents a local date in a specified timezone.\n *\n * The following example demonstrates how to convert a local date to the specified timezone.\n *\n * @example\n * ```ts-no-run\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n *\n * const date = new Date('2018-03-13T00:00:00Z');\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n *\n * // If you run this example in GMT+0200,\n * // the output will be '2018-03-12T22:00:00.000Z'.\n * console.log(tzDate.toISOString());\n * ```\n *\n * The following example demonstrates how to convert between timezones.\n *\n * @example\n * ```ts-no-run\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n *\n * // Note the \"Z\" suffix for UTC dates.\n * const date = new Date('2018-03-12T22:00:00Z');\n *\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n * const result = tzDate.toTimezone('America/Los_Angeles');\n *\n * // Regardless of the browser timezone\n * // the output will be '2018-03-12T15:00:00.000Z'.\n * console.log(tzDate.toUTCDate());\n * ```\n */\nvar ZonedDate = /** @class */function () {\n  // The constructor is aliased as a static fromUTCDate method\n  // to clarify the meaning of the utcDate parameter.\n  //\n  // It can be confused for a local date time while it is in fact\n  // treated as a UTC date that represents the local date in the timezone.\n  function ZonedDate(utcDate, timezone) {\n    this._utcDate = cloneDate(utcDate);\n    this.timezone = timezone;\n    var tzOffset = offset(timezone, utcDate);\n    this.timezoneOffset = tzOffset;\n    var localDate = shiftZoneMissingHour(utcDate, timezone);\n    this._localDate = convertTimezoneUTC(localDate, timezone, 'Etc/UTC');\n  }\n  Object.defineProperty(ZonedDate.prototype, \"cachedLocalDate\", {\n    /**\n     * Returns a cached local date that denotes the exact time in the set timezone.\n     *\n     * @return Date - A local date that denotes the exact time in the set timezone.\n     *\n     * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.\n     *\n     * > Modifying the returned instance will corrupt the `ZonedDate` state.\n     */\n    get: function () {\n      return this._localDate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ZonedDate.prototype, \"cachedUTCDate\", {\n    /**\n     * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n     *\n     * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.\n     *\n     * > Modifying the returned instance will corrupt the `ZonedDate` state.\n     */\n    get: function () {\n      return this._utcDate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  // tslint:disable:max-line-length\n  /**\n   * Converts an existing date to a specified timezone.\n   *\n   * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n   *\n   * @param date - The local date that represents the actual time instance.\n   * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n   * @return ZonedDate - The date in the specified timezone.\n   *\n   * @example\n   * ```ts-no-run\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * const date = new Date('2018-03-13T00:00:00');\n   * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n   *\n   * // If you run this example in GMT+0200,\n   * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n   * console.log(tzDate.toString());\n   *\n   * // If you run this example in UTC,\n   * // the output will be '2018-03-12T22:00:00.000Z'.\n   * console.log(tzDate.toISOString());\n   * ```\n   */\n  // tslint:enable:max-line-length\n  ZonedDate.fromLocalDate = function (date, timezone) {\n    if (timezone === void 0) {\n      timezone = '';\n    }\n    var utcDate = convertTimezoneUTC(date, 'Etc/UTC', timezone);\n    var shiftZone = isZoneMissingHour(utcDate, timezone);\n    var zoneOffset = offset(timezone, utcDate);\n    var fixedOffset = 0;\n    if (shiftZone) {\n      // Adjust for the missing hour during the DST transition in the timezone.\n      fixedOffset = zoneOffset > 0 ? -1 : 1;\n    }\n    var adjDate = addHours(utcDate, fixedOffset);\n    return ZonedDate.fromUTCDate(adjDate, timezone);\n  };\n  // tslint:disable:max-line-length\n  /**\n   * Creates a date in a specific timezone from the UTC date parts of the supplied `Date`.\n   *\n   * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n   *\n   * @param date - The UTC date that represents the time in the target zone. This time is not the actual time instant in UTC.\n   * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n   * @return ZonedDate - The date in the specified timezone.\n   *\n   * @example\n   * ```ts-no-run\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   *\n   * // Alternative syntax using Date.UTC\n   * // const date = new Date(Date.UTC(2018, 2, 12, 18, 0));\n   *\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n   * console.log(tzDate.toString());\n   *\n   * // Regardless of the browser timezone\n   * // the output in UTC will be '2018-03-12T22:00:00.000Z'.\n   * console.log(tzDate.toISOString());\n   * ```\n   */\n  // tslint:enable:max-line-length\n  ZonedDate.fromUTCDate = function (utcDate, timezone) {\n    if (timezone === void 0) {\n      timezone = '';\n    }\n    return new ZonedDate(utcDate, timezone);\n  };\n  /**\n   * Returns a local date that denotes the exact time in the set timezone.\n   *\n   * @return Date - A local date that denotes the exact time in the set timezone.\n   *\n   * @example\n   * ```ts-no-run\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // The local date represents the same moment in time as the ZonedDate:\n   * // `2018-03-12T22:00:00.000Z`.\n   * console.log(tzDate.toLocalDate().toISOString());\n   *\n   * // The local date will apply the timezone of the browser. For example,\n   * // `Tue Mar 13 2018 00:00:00 GMT+0200 (Eastern European Standard Time)`.\n   * console.log(tzDate.toLocalDate().toString())\n   * ```\n   */\n  ZonedDate.prototype.toLocalDate = function () {\n    return cloneDate(this._localDate);\n  };\n  /**\n   * Returns a `Date` instance with UTC date parts that are set to the local time in the set timezone.\n   *\n   * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n   *\n   * @example\n   * ```ts-no-run\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be '2018-03-12T18:00:00.000Z'.\n   * console.log(tzDate.toUTCDate());\n   * ```\n   */\n  ZonedDate.prototype.toUTCDate = function () {\n    return cloneDate(this._utcDate);\n  };\n  /**\n   * Converts the date to the specified timezone.\n   *\n   * @param toTimezone - The timezone to which the values will be converted. For example, `America/Los_Angeles`.\n   * @returns ZonedDate - The resulting zoned date.\n   *\n   * @example\n   * ```ts-no-run\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T22:00:00Z');\n   *\n   * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n   * const result = tzDate.toTimezone('America/Los_Angeles');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be '2018-03-12T15:00:00.000Z'.\n   * console.log(tzDate.toUTCDate());\n   * ```\n   */\n  ZonedDate.prototype.toTimezone = function (toTimezone) {\n    if (this.timezone === toTimezone) {\n      return this.clone();\n    }\n    var tzOffset = offset(this.timezone, this._utcDate);\n    var date = addMinutes(this._utcDate, tzOffset);\n    return ZonedDate.fromLocalDate(date, toTimezone);\n  };\n  /**\n   * Returns a new instance that represents the same date.\n   *\n   * @returns Date - A copy of the instance of the current zoned date.\n   */\n  ZonedDate.prototype.clone = function () {\n    return ZonedDate.fromUTCDate(this._utcDate, this.timezone);\n  };\n  // tslint:disable:max-line-length\n  /**\n   * Adds the specified number of days and returns a new instance with the resulting date in the same timezone.\n   *\n   * @param days - The number of days that will be added.\n   * @returns ZonedDate - The resulting date.\n   */\n  // tslint:enable:max-line-length\n  ZonedDate.prototype.addDays = function (days) {\n    var newDate = new Date(this._utcDate.getTime());\n    newDate.setUTCDate(newDate.getUTCDate() + days);\n    return ZonedDate.fromUTCDate(newDate, this.timezone);\n  };\n  // tslint:disable:max-line-length\n  /**\n   * Adds the specified number of milliseconds and returns a new instance with the resulting date in the same timezone.\n   *\n   * The method compensates for DST transitions and ensures that the resulting date occurs exactly after the set amount of time in the timezone.\n   *\n   * @param milliseconds - The number of days that will be added.\n   * @returns ZonedDate - The resulting date.\n   */\n  // tslint:enable:max-line-length\n  ZonedDate.prototype.addTime = function (milliseconds) {\n    var utcDate = new Date(this._utcDate.getTime());\n    var utcMid = shiftZoneMissingHour(utcDate, this.timezone);\n    utcMid.setTime(utcMid.getTime() + milliseconds);\n    var utcResult = shiftZoneMissingHour(utcMid, this.timezone);\n    return ZonedDate.fromUTCDate(utcResult, this.timezone);\n  };\n  // tslint:disable:max-line-length\n  /**\n   * Returns a new instance of the same zoned date having its time parts set to `00:00:00.000`.\n   *\n   * @returns ZonedDate - The same date having its time parts set to `00:00:00.000`.\n   */\n  // tslint:enable:max-line-length\n  ZonedDate.prototype.stripTime = function () {\n    var date = this._utcDate;\n    var ticks = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n    return ZonedDate.fromUTCDate(new Date(ticks), this.timezone);\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getTime = function () {\n    return this._localDate.getTime();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getTimezoneOffset = function () {\n    return this.timezoneOffset;\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getFullYear = function () {\n    return this._utcDate.getUTCFullYear();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getMonth = function () {\n    return this._utcDate.getUTCMonth();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getDate = function () {\n    return this._utcDate.getUTCDate();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getDay = function () {\n    return this._utcDate.getUTCDay();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getHours = function () {\n    return this._utcDate.getUTCHours();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getMinutes = function () {\n    return this._utcDate.getUTCMinutes();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getSeconds = function () {\n    return this._utcDate.getUTCSeconds();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getMilliseconds = function () {\n    return this._utcDate.getUTCMilliseconds();\n  };\n  // The local date UTC parts represent actual UTC time\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getUTCDate = function () {\n    return this._localDate.getUTCDate();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getUTCDay = function () {\n    return this._localDate.getUTCDay();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getUTCFullYear = function () {\n    return this._localDate.getUTCFullYear();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getUTCHours = function () {\n    return this._localDate.getUTCHours();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getUTCMilliseconds = function () {\n    return this._localDate.getUTCMilliseconds();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getUTCMinutes = function () {\n    return this._localDate.getUTCMinutes();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.getUTCMonth = function () {\n    return this._localDate.getUTCMonth();\n  };\n  /** @hidden */\n  ZonedDate.prototype.getUTCSeconds = function () {\n    return this._localDate.getUTCSeconds();\n  };\n  /** @hidden */\n  ZonedDate.prototype.setTime = function (time) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setMilliseconds = function (ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setUTCMilliseconds = function (ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setSeconds = function (sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setUTCSeconds = function (sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setMinutes = function (min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setUTCMinutes = function (min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setHours = function (hours, min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setUTCHours = function (hours, min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setDate = function (date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setUTCDate = function (date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setMonth = function (month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setUTCMonth = function (month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setFullYear = function (year, month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n  ZonedDate.prototype.setUTCFullYear = function (year, month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.toISOString = function () {\n    return this._localDate.toISOString();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.toJSON = function () {\n    return this._localDate.toJSON();\n  };\n  /**\n   * @hidden\n   */\n  ZonedDate.prototype.toString = function () {\n    var dateString = datePrefix(this._utcDate);\n    var timeString = this.toTimeString();\n    return dateString + \" \" + this.getDate() + \" \" + this.getFullYear() + \" \" + timeString;\n  };\n  /** @hidden */\n  ZonedDate.prototype.toDateString = function () {\n    return toLocalDate(this._utcDate).toDateString();\n  };\n  /** @hidden */\n  ZonedDate.prototype.toTimeString = function () {\n    var hours = padNumber(this.getHours());\n    var minutes = padNumber(this.getMinutes());\n    var seconds = padNumber(this.getSeconds());\n    var time = hours + \":\" + minutes + \":\" + seconds;\n    var tzOffset = formatOffset(this.timezoneOffset);\n    var abbrev = abbrTimezone(this.timezone, this._utcDate);\n    if (abbrev) {\n      abbrev = \" (\" + abbrev + \")\";\n    }\n    return time + \" \" + tzOffset + abbrev;\n  };\n  ZonedDate.prototype.toLocaleString = function (locales, options) {\n    return this._localDate.toLocaleString(locales, options);\n  };\n  ZonedDate.prototype.toLocaleDateString = function (locales, options) {\n    return this._localDate.toLocaleDateString(locales, options);\n  };\n  ZonedDate.prototype.toLocaleTimeString = function (locales, options) {\n    return this._localDate.toLocaleTimeString(locales, options);\n  };\n  /** @hidden */\n  ZonedDate.prototype.toUTCString = function () {\n    return this.toTimezone('Etc/UTC').toString();\n  };\n  ZonedDate.prototype[Symbol.toPrimitive] = function (hint) {\n    if (hint === 'string' || hint === 'default') {\n      return this.toString();\n    }\n    return this._localDate.getTime();\n  };\n  /** @hidden */\n  ZonedDate.prototype.valueOf = function () {\n    return this.getTime();\n  };\n  /** @hidden */\n  ZonedDate.prototype.getVarDate = function () {\n    throw new Error('Not implemented.');\n  };\n  /** @hidden */\n  ZonedDate.prototype.format = function (_) {\n    throw new Error('Not implemented.');\n  };\n  /** @hidden */\n  ZonedDate.prototype.formatUTC = function (_) {\n    throw new Error('Not implemented.');\n  };\n  return ZonedDate;\n}();\nexport { ZonedDate };","map":{"version":3,"names":["MS_PER_HOUR","MS_PER_MINUTE","cloneDate","abbrTimezone","offset","toLocalDate","addMinutes","date","minutes","Date","getTime","addHours","hours","dayAbbr","monthAbbr","datePrefix","utcDate","getUTCDay","getUTCMonth","padNumber","num","len","sign","Array","concat","Math","abs","join","slice","isZoneMissingHour","timezone","currentOffset","prevHour","prevOffset","shiftZoneMissingHour","dstOffset","convertTimezoneUTC","utcLocal","fromTimezone","toTimezone","fromOffset","toOffset","baseDiff","midDate","midOffset","dstDiff","formatOffset","tzOffset","value","floor","ZonedDate","_utcDate","timezoneOffset","localDate","_localDate","Object","defineProperty","prototype","get","enumerable","configurable","fromLocalDate","shiftZone","zoneOffset","fixedOffset","adjDate","fromUTCDate","toUTCDate","clone","addDays","days","newDate","setUTCDate","getUTCDate","addTime","milliseconds","utcMid","setTime","utcResult","stripTime","ticks","UTC","getUTCFullYear","getTimezoneOffset","getFullYear","getMonth","getDate","getDay","getHours","getUTCHours","getMinutes","getUTCMinutes","getSeconds","getUTCSeconds","getMilliseconds","getUTCMilliseconds","time","Error","setMilliseconds","ms","setUTCMilliseconds","setSeconds","sec","setUTCSeconds","setMinutes","min","setUTCMinutes","setHours","setUTCHours","setDate","setMonth","month","setUTCMonth","setFullYear","year","setUTCFullYear","toISOString","toJSON","toString","dateString","timeString","toTimeString","toDateString","seconds","abbrev","toLocaleString","locales","options","toLocaleDateString","toLocaleTimeString","toUTCString","Symbol","toPrimitive","hint","valueOf","getVarDate","format","_","formatUTC"],"sources":["/home/shermannatrix/RnD/ttg-kendoreact/forms/getting-started/node_modules/@progress/kendo-date-math/dist/es/tz/zoned-date.js"],"sourcesContent":["import { MS_PER_HOUR, MS_PER_MINUTE } from '../constants';\nimport { cloneDate } from '../clone-date';\nimport { abbrTimezone } from './abbr-timezone';\nimport { offset } from './offset';\nimport { toLocalDate } from './to-local-date';\nvar addMinutes = function (date, minutes) { return new Date(date.getTime() + minutes * MS_PER_MINUTE); };\nvar addHours = function (date, hours) { return new Date(date.getTime() + hours * MS_PER_HOUR); };\nvar dayAbbr = [\n    'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'\n];\nvar monthAbbr = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n];\nvar datePrefix = function (utcDate) {\n    return dayAbbr[utcDate.getUTCDay()] + ' ' + monthAbbr[utcDate.getUTCMonth()];\n};\nvar padNumber = function (num, len) {\n    if (len === void 0) { len = 2; }\n    var sign = num < 0 ? '-' : '';\n    return sign + new Array(len).concat([Math.abs(num)]).join('0').slice(-len);\n};\nfunction isZoneMissingHour(date, timezone) {\n    var currentOffset = offset(timezone, date);\n    var prevHour = addHours(date, -1);\n    var prevOffset = offset(timezone, prevHour);\n    return currentOffset < prevOffset;\n}\nfunction shiftZoneMissingHour(utcDate, timezone) {\n    // Adjust for missing hour during DST transition in timezone.\n    var dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;\n    return addHours(utcDate, dstOffset);\n}\nfunction convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {\n    if (fromTimezone === toTimezone) {\n        return utcLocal;\n    }\n    var fromOffset = offset(fromTimezone, utcLocal);\n    var toOffset = offset(toTimezone, utcLocal);\n    var baseDiff = fromOffset - toOffset;\n    var midDate = addMinutes(utcLocal, baseDiff);\n    var midOffset = offset(toTimezone, midDate);\n    var dstDiff = toOffset - midOffset;\n    return addMinutes(utcLocal, baseDiff + dstDiff);\n}\nfunction formatOffset(tzOffset) {\n    var sign = tzOffset <= 0 ? '+' : '-';\n    var value = Math.abs(tzOffset);\n    var hours = padNumber(Math.floor(value / 60));\n    var minutes = padNumber(value % 60);\n    return \"GMT\" + sign + hours + minutes;\n}\n/**\n * Represents a local date in a specified timezone.\n *\n * The following example demonstrates how to convert a local date to the specified timezone.\n *\n * @example\n * ```ts-no-run\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n *\n * const date = new Date('2018-03-13T00:00:00Z');\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n *\n * // If you run this example in GMT+0200,\n * // the output will be '2018-03-12T22:00:00.000Z'.\n * console.log(tzDate.toISOString());\n * ```\n *\n * The following example demonstrates how to convert between timezones.\n *\n * @example\n * ```ts-no-run\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n *\n * // Note the \"Z\" suffix for UTC dates.\n * const date = new Date('2018-03-12T22:00:00Z');\n *\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n * const result = tzDate.toTimezone('America/Los_Angeles');\n *\n * // Regardless of the browser timezone\n * // the output will be '2018-03-12T15:00:00.000Z'.\n * console.log(tzDate.toUTCDate());\n * ```\n */\nvar ZonedDate = /** @class */ (function () {\n    // The constructor is aliased as a static fromUTCDate method\n    // to clarify the meaning of the utcDate parameter.\n    //\n    // It can be confused for a local date time while it is in fact\n    // treated as a UTC date that represents the local date in the timezone.\n    function ZonedDate(utcDate, timezone) {\n        this._utcDate = cloneDate(utcDate);\n        this.timezone = timezone;\n        var tzOffset = offset(timezone, utcDate);\n        this.timezoneOffset = tzOffset;\n        var localDate = shiftZoneMissingHour(utcDate, timezone);\n        this._localDate = convertTimezoneUTC(localDate, timezone, 'Etc/UTC');\n    }\n    Object.defineProperty(ZonedDate.prototype, \"cachedLocalDate\", {\n        /**\n         * Returns a cached local date that denotes the exact time in the set timezone.\n         *\n         * @return Date - A local date that denotes the exact time in the set timezone.\n         *\n         * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.\n         *\n         * > Modifying the returned instance will corrupt the `ZonedDate` state.\n         */\n        get: function () {\n            return this._localDate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZonedDate.prototype, \"cachedUTCDate\", {\n        /**\n         * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.\n         *\n         * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n         *\n         * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.\n         *\n         * > Modifying the returned instance will corrupt the `ZonedDate` state.\n         */\n        get: function () {\n            return this._utcDate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // tslint:disable:max-line-length\n    /**\n     * Converts an existing date to a specified timezone.\n     *\n     * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n     *\n     * @param date - The local date that represents the actual time instance.\n     * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n     * @return ZonedDate - The date in the specified timezone.\n     *\n     * @example\n     * ```ts-no-run\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * const date = new Date('2018-03-13T00:00:00');\n     * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n     *\n     * // If you run this example in GMT+0200,\n     * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n     * console.log(tzDate.toString());\n     *\n     * // If you run this example in UTC,\n     * // the output will be '2018-03-12T22:00:00.000Z'.\n     * console.log(tzDate.toISOString());\n     * ```\n     */\n    // tslint:enable:max-line-length\n    ZonedDate.fromLocalDate = function (date, timezone) {\n        if (timezone === void 0) { timezone = ''; }\n        var utcDate = convertTimezoneUTC(date, 'Etc/UTC', timezone);\n        var shiftZone = isZoneMissingHour(utcDate, timezone);\n        var zoneOffset = offset(timezone, utcDate);\n        var fixedOffset = 0;\n        if (shiftZone) {\n            // Adjust for the missing hour during the DST transition in the timezone.\n            fixedOffset = zoneOffset > 0 ? -1 : 1;\n        }\n        var adjDate = addHours(utcDate, fixedOffset);\n        return ZonedDate.fromUTCDate(adjDate, timezone);\n    };\n    // tslint:disable:max-line-length\n    /**\n     * Creates a date in a specific timezone from the UTC date parts of the supplied `Date`.\n     *\n     * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n     *\n     * @param date - The UTC date that represents the time in the target zone. This time is not the actual time instant in UTC.\n     * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n     * @return ZonedDate - The date in the specified timezone.\n     *\n     * @example\n     * ```ts-no-run\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     *\n     * // Alternative syntax using Date.UTC\n     * // const date = new Date(Date.UTC(2018, 2, 12, 18, 0));\n     *\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n     * console.log(tzDate.toString());\n     *\n     * // Regardless of the browser timezone\n     * // the output in UTC will be '2018-03-12T22:00:00.000Z'.\n     * console.log(tzDate.toISOString());\n     * ```\n     */\n    // tslint:enable:max-line-length\n    ZonedDate.fromUTCDate = function (utcDate, timezone) {\n        if (timezone === void 0) { timezone = ''; }\n        return new ZonedDate(utcDate, timezone);\n    };\n    /**\n     * Returns a local date that denotes the exact time in the set timezone.\n     *\n     * @return Date - A local date that denotes the exact time in the set timezone.\n     *\n     * @example\n     * ```ts-no-run\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // The local date represents the same moment in time as the ZonedDate:\n     * // `2018-03-12T22:00:00.000Z`.\n     * console.log(tzDate.toLocalDate().toISOString());\n     *\n     * // The local date will apply the timezone of the browser. For example,\n     * // `Tue Mar 13 2018 00:00:00 GMT+0200 (Eastern European Standard Time)`.\n     * console.log(tzDate.toLocalDate().toString())\n     * ```\n     */\n    ZonedDate.prototype.toLocalDate = function () {\n        return cloneDate(this._localDate);\n    };\n    /**\n     * Returns a `Date` instance with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @example\n     * ```ts-no-run\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be '2018-03-12T18:00:00.000Z'.\n     * console.log(tzDate.toUTCDate());\n     * ```\n     */\n    ZonedDate.prototype.toUTCDate = function () {\n        return cloneDate(this._utcDate);\n    };\n    /**\n     * Converts the date to the specified timezone.\n     *\n     * @param toTimezone - The timezone to which the values will be converted. For example, `America/Los_Angeles`.\n     * @returns ZonedDate - The resulting zoned date.\n     *\n     * @example\n     * ```ts-no-run\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T22:00:00Z');\n     *\n     * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n     * const result = tzDate.toTimezone('America/Los_Angeles');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be '2018-03-12T15:00:00.000Z'.\n     * console.log(tzDate.toUTCDate());\n     * ```\n     */\n    ZonedDate.prototype.toTimezone = function (toTimezone) {\n        if (this.timezone === toTimezone) {\n            return this.clone();\n        }\n        var tzOffset = offset(this.timezone, this._utcDate);\n        var date = addMinutes(this._utcDate, tzOffset);\n        return ZonedDate.fromLocalDate(date, toTimezone);\n    };\n    /**\n     * Returns a new instance that represents the same date.\n     *\n     * @returns Date - A copy of the instance of the current zoned date.\n     */\n    ZonedDate.prototype.clone = function () {\n        return ZonedDate.fromUTCDate(this._utcDate, this.timezone);\n    };\n    // tslint:disable:max-line-length\n    /**\n     * Adds the specified number of days and returns a new instance with the resulting date in the same timezone.\n     *\n     * @param days - The number of days that will be added.\n     * @returns ZonedDate - The resulting date.\n     */\n    // tslint:enable:max-line-length\n    ZonedDate.prototype.addDays = function (days) {\n        var newDate = new Date(this._utcDate.getTime());\n        newDate.setUTCDate(newDate.getUTCDate() + days);\n        return ZonedDate.fromUTCDate(newDate, this.timezone);\n    };\n    // tslint:disable:max-line-length\n    /**\n     * Adds the specified number of milliseconds and returns a new instance with the resulting date in the same timezone.\n     *\n     * The method compensates for DST transitions and ensures that the resulting date occurs exactly after the set amount of time in the timezone.\n     *\n     * @param milliseconds - The number of days that will be added.\n     * @returns ZonedDate - The resulting date.\n     */\n    // tslint:enable:max-line-length\n    ZonedDate.prototype.addTime = function (milliseconds) {\n        var utcDate = new Date(this._utcDate.getTime());\n        var utcMid = shiftZoneMissingHour(utcDate, this.timezone);\n        utcMid.setTime(utcMid.getTime() + milliseconds);\n        var utcResult = shiftZoneMissingHour(utcMid, this.timezone);\n        return ZonedDate.fromUTCDate(utcResult, this.timezone);\n    };\n    // tslint:disable:max-line-length\n    /**\n     * Returns a new instance of the same zoned date having its time parts set to `00:00:00.000`.\n     *\n     * @returns ZonedDate - The same date having its time parts set to `00:00:00.000`.\n     */\n    // tslint:enable:max-line-length\n    ZonedDate.prototype.stripTime = function () {\n        var date = this._utcDate;\n        var ticks = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n        return ZonedDate.fromUTCDate(new Date(ticks), this.timezone);\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getTime = function () {\n        return this._localDate.getTime();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getTimezoneOffset = function () {\n        return this.timezoneOffset;\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getFullYear = function () {\n        return this._utcDate.getUTCFullYear();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getMonth = function () {\n        return this._utcDate.getUTCMonth();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getDate = function () {\n        return this._utcDate.getUTCDate();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getDay = function () {\n        return this._utcDate.getUTCDay();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getHours = function () {\n        return this._utcDate.getUTCHours();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getMinutes = function () {\n        return this._utcDate.getUTCMinutes();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getSeconds = function () {\n        return this._utcDate.getUTCSeconds();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getMilliseconds = function () {\n        return this._utcDate.getUTCMilliseconds();\n    };\n    // The local date UTC parts represent actual UTC time\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCDate = function () {\n        return this._localDate.getUTCDate();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCDay = function () {\n        return this._localDate.getUTCDay();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCFullYear = function () {\n        return this._localDate.getUTCFullYear();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCHours = function () {\n        return this._localDate.getUTCHours();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCMilliseconds = function () {\n        return this._localDate.getUTCMilliseconds();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCMinutes = function () {\n        return this._localDate.getUTCMinutes();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCMonth = function () {\n        return this._localDate.getUTCMonth();\n    };\n    /** @hidden */\n    ZonedDate.prototype.getUTCSeconds = function () {\n        return this._localDate.getUTCSeconds();\n    };\n    /** @hidden */\n    ZonedDate.prototype.setTime = function (time) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setMilliseconds = function (ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCMilliseconds = function (ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setSeconds = function (sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCSeconds = function (sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setMinutes = function (min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCMinutes = function (min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setHours = function (hours, min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCHours = function (hours, min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setDate = function (date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCDate = function (date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setMonth = function (month, date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCMonth = function (month, date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setFullYear = function (year, month, date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCFullYear = function (year, month, date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.toISOString = function () {\n        return this._localDate.toISOString();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.toJSON = function () {\n        return this._localDate.toJSON();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.toString = function () {\n        var dateString = datePrefix(this._utcDate);\n        var timeString = this.toTimeString();\n        return dateString + \" \" + this.getDate() + \" \" + this.getFullYear() + \" \" + timeString;\n    };\n    /** @hidden */\n    ZonedDate.prototype.toDateString = function () {\n        return toLocalDate(this._utcDate).toDateString();\n    };\n    /** @hidden */\n    ZonedDate.prototype.toTimeString = function () {\n        var hours = padNumber(this.getHours());\n        var minutes = padNumber(this.getMinutes());\n        var seconds = padNumber(this.getSeconds());\n        var time = hours + \":\" + minutes + \":\" + seconds;\n        var tzOffset = formatOffset(this.timezoneOffset);\n        var abbrev = abbrTimezone(this.timezone, this._utcDate);\n        if (abbrev) {\n            abbrev = \" (\" + abbrev + \")\";\n        }\n        return time + \" \" + tzOffset + abbrev;\n    };\n    ZonedDate.prototype.toLocaleString = function (locales, options) {\n        return this._localDate.toLocaleString(locales, options);\n    };\n    ZonedDate.prototype.toLocaleDateString = function (locales, options) {\n        return this._localDate.toLocaleDateString(locales, options);\n    };\n    ZonedDate.prototype.toLocaleTimeString = function (locales, options) {\n        return this._localDate.toLocaleTimeString(locales, options);\n    };\n    /** @hidden */\n    ZonedDate.prototype.toUTCString = function () {\n        return this.toTimezone('Etc/UTC').toString();\n    };\n    ZonedDate.prototype[Symbol.toPrimitive] = function (hint) {\n        if (hint === 'string' || hint === 'default') {\n            return this.toString();\n        }\n        return this._localDate.getTime();\n    };\n    /** @hidden */\n    ZonedDate.prototype.valueOf = function () {\n        return this.getTime();\n    };\n    /** @hidden */\n    ZonedDate.prototype.getVarDate = function () {\n        throw new Error('Not implemented.');\n    };\n    /** @hidden */\n    ZonedDate.prototype.format = function (_) {\n        throw new Error('Not implemented.');\n    };\n    /** @hidden */\n    ZonedDate.prototype.formatUTC = function (_) {\n        throw new Error('Not implemented.');\n    };\n    return ZonedDate;\n}());\nexport { ZonedDate };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}